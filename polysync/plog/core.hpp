#pragma once

// Certain message types are defined at compile time, mostly from PolySync
// core.idl, here in core.hpp.  Ideally, this file would be generated by pdmgen
// to keep perfectly in sync with PolySync.  However, to keep general data
// science applications lightweight and standalone from the collection
// software, they are actually just copied here and will have to be manually
// updated as the plog format evolves.
//
// Parsing of the plog (plog/decoder.hpp) is typesafe and generic, even for the
// compile time defined message types found here.  This is implemented via
// boost::hana.  The hana wrappers are defined at the bottom of this file, and
// the reader class knows how to introspect these hana structures for
// serialization.
//
// Most of the PolySync message types are dynamically defined elsewhere, which
// is why this file is deliberately small.

#include <cstdint>
#include <vector>
#include <map>
#include <algorithm>

#include <boost/hana.hpp>
#include <boost/optional.hpp>
// Pull in a multiprecision type to support the PolySync hash and any other CRC types.
#include <boost/multiprecision/cpp_int.hpp>

#include <polysync/exception.hpp>
#include <polysync/tree.hpp>

namespace polysync { namespace plog {

constexpr size_t PSYNC_MODULE_VERIFY_HASH_LEN = 16;

namespace multiprecision = boost::multiprecision;
namespace hana = boost::hana;

using ps_hash_type = multiprecision::cpp_int;
// I think that export_bits() has a bug, breaking the fixed precision type,
// which is why I am falling back to cpp_int because it seems to work better
// then.  I have submitted Ticket #12627 to boost.org on this issue.
    // multiprecision::number<multiprecision::cpp_int_backend<
    // PSYNC_MODULE_VERIFY_HASH_LEN*8,
    // PSYNC_MODULE_VERIFY_HASH_LEN*8,
    // multiprecision::unsigned_magnitude>>;

// a sequence<LenType, T> is just a vector<T> that knows to read it's length as a LenType
template <typename LenType, typename T>
struct sequence : std::vector<T> {
    using length_type = LenType;
};

template <typename LenType, typename T>
bool operator==(const sequence<LenType, T>& lhs, const sequence<LenType, T>& rhs) {
    if (lhs.size() != rhs.size())
        return false;
    return std::equal(lhs.begin(), lhs.end(), rhs.begin(), boost::hana::equal);
}

// specialize the std::uint8_t sequences because they are actually strings
template <typename LenType>
struct sequence<LenType, std::uint8_t> : std::string {
    using std::string::string;
    using length_type = LenType;
};

using ps_name_type = sequence<std::uint16_t, std::uint8_t>;
using ps_msg_type = std::uint32_t;
using ps_guid = std::uint64_t;
using ps_timestamp = std::uint64_t;
using ps_identifier = std::uint32_t;
using ps_sensor_kind = std::uint32_t;

// struct message {
//     struct {
//         boost::optional<std::streamoff> begin;
//         boost::optional<std::streamoff> end;
//     } offset;
// };

struct ps_log_module {
    std::uint8_t version_major;
    std::uint8_t version_minor;
    std::uint16_t version_subminor;
    std::uint32_t build_date;
    ps_hash_type build_hash;
    ps_name_type name;
};

struct ps_type_support {
    std::uint32_t type;
    ps_name_type name;
};

struct ps_log_header {
    std::uint8_t version_major;
    std::uint8_t version_minor;
    std::uint16_t version_subminor;
    std::uint32_t build_date;
    std::uint64_t node_guid;
    sequence<std::uint32_t, ps_log_module> modules;
    sequence<std::uint32_t, ps_type_support> type_supports;
};

struct ps_msg_header {
    ps_msg_type type;
    plog::ps_timestamp timestamp;
    ps_guid src_guid;
};

struct ps_log_record {
    std::uint32_t index;
    std::uint32_t size;
    std::uint32_t prev_size;
    plog::ps_timestamp timestamp;
};

extern std::map<plog::ps_msg_type, std::string> type_support_map;
extern void load();

}} // namespace polysync::plog

// Hana adaptors must be in global namespace

BOOST_HANA_ADAPT_STRUCT(polysync::plog::ps_log_header,
        version_major, version_minor, version_subminor, build_date, node_guid
       , modules, type_supports);
BOOST_HANA_ADAPT_STRUCT(polysync::plog::ps_log_module, version_major, version_minor,
        version_subminor, build_date, build_hash, name);
BOOST_HANA_ADAPT_STRUCT(polysync::plog::ps_type_support, type, name);
BOOST_HANA_ADAPT_STRUCT(polysync::plog::ps_log_record, index, size, prev_size, timestamp);
BOOST_HANA_ADAPT_STRUCT(polysync::plog::ps_msg_header, type, timestamp, src_guid);

namespace polysync { namespace exception {

using ps_log_record = boost::error_info<struct tag_record, plog::ps_log_record>;


}}

